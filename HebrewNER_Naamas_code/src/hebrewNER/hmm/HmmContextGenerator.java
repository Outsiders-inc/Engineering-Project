package hebrewNER.hmm;

import hebrewNER.util.*;

/**
* Context generator to be used by the event stream and the name finder.<br>
* Context is created to a token by its surrounding (words in a window of
* +-2). A context of a token is a union of its dictionary entry, regular expressions
* and token information.
*/
public class HmmContextGenerator {
	
	
	private Dictionary dictionary,FWL,FWLTag;
	private Dictionary UBIMinus2_1,UBIMinus1,UBIPlus1;
	private Dictionary nouns, nounsMinus1, nounsPlus1;
	private RegExp regExp;
		
	
	public HmmContextGenerator(){
		String dir = "lists";
		dictionary = Dictionary.getInstance(dir+"/Dictionary.txt");
		FWL = Dictionary.getInstance(dir+"/FWL.txt");
		FWLTag = Dictionary.getInstance(dir+"/FWLPerTag.txt");
		UBIMinus2_1 = Dictionary.getInstance(dir+"/UBI-2-1.txt");
		UBIMinus1 = Dictionary.getInstance(dir+"/UBI-1.txt");
		UBIPlus1 = Dictionary.getInstance(dir+"/UBI+1.txt");
		nouns = Dictionary.getInstance(dir+"/Nouns.txt");  
		nounsMinus1 = Dictionary.getInstance(dir+"/nouns-1.txt");
		nounsPlus1 = Dictionary.getInstance(dir+"/nouns+1.txt");
		regExp = RegExp.getInstance();
	}
	
	/**
  	 * Generate context for a sentence.
   	 * @param toks   the array of sentence tokens 
   	 * @return The array of corresponding contexts generated by this context generator
   	 */	
	public String[] getContext(String[] toks){
		String[] contexts=new String[toks.length];
		for(int i=0;i<toks.length;i++){
			contexts[i]=getContext(toks,i);
 		}
		return contexts;
	}
	
	/**
  	 * Generate context for a single token.
   	 * @param toks   the array of sentence tokens 
   	 * @param i   the index of the current token 
   	 * @return the context - a string representing the union of its featurs, the featurs are separated by"_"
   	 */	
	public String getContext(String[] toks, int i){
 	
 		String context = "";
 	 	String w = toks[i];
 	
 	    //previous previous word
 		String ppw=null;
 		if (i - 2 >= 0) ppw = toks[i - 2];
 		
 		// previous word
 		String pw=null;
 		if (i != 0) pw = toks[i - 1];
 	
 		//next word
 		String nw=null;
 		if (i + 1 < toks.length) nw = toks[i + 1];
 		
 		//next next word
 		String nnw=null;
 		if (i + 2 < toks.length) nnw = toks[i + 2];
 		
 		//checking for different dictionary entries
 		String expDict=dictionary.getDictionary(ppw,pw,w,nw,nnw);
 		if(expDict.equals("#f")) expDict=dictionary.getDictionary(w);
 		if(expDict.equals("#f")) expDict=nouns.getDictionary(w);
 		context+=expDict;
 		
 		String fwTag=FWLTag.getDictionary(ppw,pw,w,nw,nnw);
 		if(fwTag.equals("#f")) fwTag=FWL.getDictionary(w);
 		context+="_"+fwTag;
 		
 		String prevExp=UBIMinus2_1.getDictionary(ppw+" "+pw);
 		if(prevExp.equals("#f")) prevExp=UBIMinus1.getDictionary(pw);
 		if(prevExp.equals("#f")) prevExp=nounsMinus1.getDictionary(pw);
 		context+="_"+prevExp;
 		
 		String nextExp=UBIPlus1.getDictionary(nw);
 		if(nextExp.equals("#f")) nextExp=nounsPlus1.getDictionary(nw);
 		context+="_"+nextExp;
 		 		
 		//binary regular expression
 		context+="_"+regExp.inCommas(toks,i);
 		context+="_"+regExp.isDate(toks,i);
 		context+="_"+regExp.isPercent(pw,w,nw);
 		context+="_"+regExp.isTime(pw,w,nw);
 		context+="_"+regExp.isMoney(ppw,pw,w,nw,nnw);
 		context+="_"+regExp.isLoc(ppw,pw,w,nw,nnw);
 		String wf=TokenInfo.wordFeature(w);
 		context+="_"+regExp.isOrg(ppw,pw,w,nw,nnw,wf);
 		
 		return context;	
 	}
 }
