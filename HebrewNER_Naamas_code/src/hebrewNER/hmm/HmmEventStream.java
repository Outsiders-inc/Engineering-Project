package hebrewNER.hmm;

import java.util.List;

import vohmm.corpus.*;
import vohmm.util.*;
import vohmm.application.Tagger2;

import hebrewNER.io.*;

/**
 * This event stream is used by TrainHmm for training hmm model from
 * a file containig the training set.<br>
 * The stream returns one Event at a time. The context of an event is generated by
 * HmmContextGenerator and part of speech tagger.
 */
public class HmmEventStream {
	
	private UTF8InputStream input;
	private String [] toks;
	private List outcomes;
	private HmmContextGenerator cg;
	private int curSentIter;
	private Tagger2 posTagger;
	private Sentence posAnal;
	
		
	public HmmEventStream(String fileName) {
		input = new UTF8InputStream(fileName);
		posTagger = new Tagger2();
		cg = new HmmContextGenerator();
		loadSentence();
	}
	
	private void loadSentence(){
		List temp = input.nextSentTokens();
		toks=((String[]) temp.toArray(new String[temp.size()]));
		outcomes=input.nextSentTags();
		posAnal=posTagger.tagSentence(input.tokensAsString());
		curSentIter = 0;
	}
	
	/**
  	 * @return The next event in the training file.
   	 */	
	public Event nextEvent() {
		if (curSentIter == toks.length)
			loadSentence();		
		Anal wAnal = posAnal.getToken(curSentIter).getSelectedAnal(); 
		String wpos = Long.toString(wAnal.getTag().getBitmask() & Bitmask.BASEFORM_POS);
 		Event next =new Event((String) outcomes.get(curSentIter),wpos
								,cg.getContext(toks, curSentIter));
		curSentIter++;
		return next;
	}
	
	/**
  	 * has next event
   	 */
	public boolean hasNext(){
		return (curSentIter < toks.length); 
	}
	
	/**
  	 * has next sentence
   	 */
	public boolean hasNextSent(){
		return (!hasNext() && (input.hasNextSent() || input.hasNextFile()));
	}
}
